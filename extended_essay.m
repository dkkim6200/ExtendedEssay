function extended_essay()  ##  graphics_toolkit gnuplot##  t = 0:0.01:1;##  clf;##  hold on;##  plot(bezier(t, 0, (pi-4)/3, (2*pi-4)/3, pi), bezier(t, 0, 0, 2, 2), "color", "b");##  plot(cycloid_x(t), cycloid_y(t), "color", "r");##  xlabel ("x");##  ylabel ("y");##  hold off;##  title ("Numerical Analysis");  ##  t = 0:0.001:1;##  max(epsilon(t, [0, 0], [(pi-4)/3, 0], [(2*pi-4)/3, 2], [pi, 2]))  ##  u = 0;##  v = 0;##  minZeta = inf;##  ##  for i = 2:10##    [u, v, minZeta] = approximate(0, 2, 0, pi, 10^(-1 * i));##    printf("u: %d\n", u);##    printf("v: %d\n", v);##    printf("min(zeta(u,v)): %d\n", minZeta);##    printf("\n");##  endfor  [u, v, minZeta] = approximate(0, 2, 1, 3, 0.01);  printf("u: %d\n", u);  printf("v: %d\n", v);  printf("min(zeta(u,v)): %d\n", minZeta);  printf("\n");    if (u <= 0)    u = 0.01;  endif    [u, v, minZeta] = approximate(u-0.01, u+0.01, v-0.01, v+0.01, 0.0001);  printf("u: %d\n", u);  printf("v: %d\n", v);  printf("min(zeta(u,v)): %d\n", minZeta);  printf("\n");    if (u <= 0)    u = 0.0001;  endif    [u, v, minZeta] = approximate(u-0.0001, u+0.0001, v-0.0001, v+0.0001, 0.000001);  printf("u: %d\n", u);  printf("v: %d\n", v);  printf("min(zeta(u,v)): %d\n", minZeta);  printf("\n");endfunctionfunction retval = cycloid_x(t)  retval = pi * t - sin(pi * t);endfunctionfunction retval = cycloid_y(t)  retval = 1 - cos(pi * t);endfunction%function [x, y] = bezier(t, P0, P1, P2, P3)%  x = P0(0)(1-t)^3 + P1(0)(1-t)^2 * t + P2(0)(1-t) * t^2 + P3(0) * t^3;%  y = P0(1)(1-t)^3 + P1(1)(1-t)^2 * t + P2(1)(1-t) * t^2 + P3(1) * t^3;%endfunctionfunction retval = bezier(t, P0, P1, P2, P3)  retval = P0 .* (1-t).^3 + 3 .* P1 .* (1-t).^2 .* t + 3 .* P2 .* (1-t) .* t.^2 + P3 .* t.^3;endfunctionfunction retval = epsilon(t, P0, P1, P2, P3) % t is scalar value, and P0~P3 are 2D vector.  Bx = bezier(t, P0(1), P1(1), P2(1), P3(1));  By = bezier(t, P0(2), P1(2), P2(2), P3(2));    retval = sqrt((cycloid_x(t)-Bx).^2 + (cycloid_y(t)-By).^2);endfunctionfunction retval = zeta(u, v) % Using t interval of 0.001  t = 0:0.001:1;  retval = max(epsilon(t, [0, 0], [0, u], [pi - v, 2], [pi, 2]));endfunctionfunction [u, v, minZeta] = approximate(u_start, u_end, v_start, v_end, interval)  minZeta = inf;  u = 0;  v = 0;    for i = u_start:interval:u_end    for j = v_start:interval:v_end      curZeta = zeta(i, j);            if (curZeta < minZeta)        minZeta = curZeta;        u = i;        v = j;      endif    endfor  endforendfunction